@model DataModel.AdviceModel;
@{
    ViewData["Title"] = "Home Page";
}

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://unicons.iconscout.com/release/v4.0.0/css/line.css">
    <link rel="stylesheet" href="~/css/IndexStylesheet.css" asp-append-version="true" />@*--------------------------------------(styles both index and shared header)---------*@
    <link rel="stylesheet" href="~/css/HeaderStylesheet .css" asp-append-version="true" />@*-------------------------------------------header style only----------------------*@
</head>

<body class="container">

    <!-- -----------------------------------------------------------------------------------------------------------SEARCH BAR--------------------------------------------- -->
    @*  <form>
    <input type="text" id="search" placeholder="Search..." autocomplete="off">

    <select id="country">
    <option value="USA">USA</option>
    <option value="Canada">Canada</option>
    <option value="Mexico">Mexico</option>
    </select>

    <button type="button" onclick="search()">Search</button>
    </form>*@


    <form asp-action="map4" method="get">

        <div class="hospital-search-index">

            @*<div id="findhospitals">Find hospitals in:</div>*@

            <div id="locationField">
                <input id="autocomplete" placeholder="Enter a city" type="text" name="search" />
            </div>

            <div id="controls">
                <select id="country" name="country">
                    <option value="all">All</option>
                    <option value="au">Australia</option>
                    <option value="br">Brazil</option>
                    <option value="ca">Canada</option>
                    <option value="fr">France</option>
                    <option value="de">Germany</option>
                    <option value="mx">Mexico</option>
                    <option value="nz">New Zealand</option>
                    <option value="it">Italy</option>
                    <option value="za">South Africa</option>
                    <option value="es">Spain</option>
                    <option value="pt">Portugal</option>
                    <option value="us" selected>U.S.A.</option>
                    <option value="uk">United Kingdom</option>
                </select>
            </div>

            <button class="search_button" type="submit" onclick="search()">SEARCH</button>

            <div id="map5"></div>

            <div id="listing">
                <table id="resultsTable">
                    <tbody id="results"></tbody>
                </table>
            </div>
        </div>
        <!----------------END Map Container------------------------------->

        <div style="display: none">
            <div id="info-content">
                <table>
                    <tr id="iw-url-row" class="iw_table_row">
                        <td id="iw-icon" class="iw_table_icon"></td>
                        <td id="iw-url"></td>
                    </tr>
                    <tr id="iw-address-row" class="iw_table_row">
                        <td class="iw_attribute_name">Address:</td>
                        <td id="iw-address"></td>
                    </tr>
                    <tr id="iw-phone-row" class="iw_table_row">
                        <td class="iw_attribute_name">Telephone:</td>
                        <td id="iw-phone"></td>
                    </tr>
                    <tr id="iw-rating-row" class="iw_table_row">
                        <td class="iw_attribute_name">Rating:</td>
                        <td id="iw-rating"></td>
                    </tr>
                    <tr id="iw-website-row" class="iw_table_row">
                        <td class="iw_attribute_name">Website:</td>
                        <td id="iw-website"></td>
                    </tr>
                </table>
            </div>
        </div>




    </form>
    <!-- ----------------------------------------------------------------------------------------------------------MISSION STATEMENT----------------------------------------------- -->

    <img class="logo" src="~/Images/MedIntellia logo.png" alt="MedIntellia logo" height="80">

    <div class="mission_box animated">
        <p class="mission_statement_paragraph">
            "Our mission is to empower individuals seeking medical care by providing reliable,
            comprehensive, and up-to-date information on healthcare options worldwide. We
            aim to curate a platform that enables users to make informed decisions on
            healthcare based on location, culture, regulations, price, safety, and quality. Our
            goal is to provide transparency in medical tourism and guide our users towards
            the best possible healthcare experience. We believe that everyone should have
            access to safe, affordable, and quality medical care, regardless of where they live."
        </p>
    </div>


</body>
<!-- --------------------------------------------------------------------------------------------------------------FOOTER---------------------------------------------------- -->
<footer class="border-top footer text-muted">
    <div class="container">
        &copy;  MedIntellia - 2023</a>
    </div>
</footer>
<script async
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCSEphaILLzI6VzorNDryPTm0fuW8o0shA&libraries=places&callback=initMap">
</script>
<script>
    // This example uses the autocomplete feature of the Google Places API.
    // It allows the user to find all hospitals in a given place, within a given
    // country. It then displays markers for all the hospitals returned,
    // with on-click details for each hospital.
    // This example requires the Places library. Include the libraries=places
    // parameter when you first load the API. For example:
    //<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCSEphaILLzI6VzorNDryPTm0fuW8o0shA&libraries=places" >
    let map;
    let places;
    let infoWindow;
    let markers = [];
    let autocomplete;
    const countryRestrict = { country: "us" };
    const MARKER_PATH =
        "https://developers.google.com/maps/documentation/javascript/images/marker_green";
    const hostnameRegexp = new RegExp("^https?://.+?/");
    const countries = {
        au: {
            center: { lat: -25.3, lng: 133.8 },
            zoom: 4,
        },
        br: {
            center: { lat: -14.2, lng: -51.9 },
            zoom: 3,
        },
        ca: {
            center: { lat: 62, lng: -110.0 },
            zoom: 3,
        },
        fr: {
            center: { lat: 46.2, lng: 2.2 },
            zoom: 5,
        },
        de: {
            center: { lat: 51.2, lng: 10.4 },
            zoom: 5,
        },
        mx: {
            center: { lat: 23.6, lng: -102.5 },
            zoom: 4,
        },
        nz: {
            center: { lat: -40.9, lng: 174.9 },
            zoom: 5,
        },
        it: {
            center: { lat: 41.9, lng: 12.6 },
            zoom: 5,
        },
        za: {
            center: { lat: -30.6, lng: 22.9 },
            zoom: 5,
        },
        es: {
            center: { lat: 40.5, lng: -3.7 },
            zoom: 5,
        },
        pt: {
            center: { lat: 39.4, lng: -8.2 },
            zoom: 6,
        },
        us: {
            center: { lat: 37.1, lng: -95.7 },
            zoom: 3,
        },
        uk: {
            center: { lat: 54.8, lng: -4.6 },
            zoom: 5,
        },
    };

    function initMap() {
        map = new google.maps.Map(document.getElementById("map5"), {
            zoom: countries["us"].zoom,
            center: countries["us"].center,
            mapTypeControl: false,
            panControl: false,
            zoomControl: false,
            streetViewControl: false,
        });
        infoWindow = new google.maps.InfoWindow({
            content: document.getElementById("info-content"),
        });
        // Create the autocomplete object and associate it with the UI input control.
        // Restrict the search to the default country, and to place type "cities".
        autocomplete = new google.maps.places.Autocomplete(
            document.getElementById("autocomplete"),
            {
                types: ["(cities)"],
                componentRestrictions: countryRestrict,
                fields: ["geometry"],
            }
        );
        places = new google.maps.places.PlacesService(map);
        autocomplete.addListener("place_changed", onPlaceChanged);
        // Add a DOM event listener to react when the user selects a country.
        document
            .getElementById("country")
            .addEventListener("change", setAutocompleteCountry);
    }

    // When the user selects a city, get the place details for the city and
    // zoom the map in on the city.
    function onPlaceChanged() {
        const place = autocomplete.getPlace();

        //document.getElementById("listing").style.display = "revert";

        if (place.geometry && place.geometry.location) {
            map.panTo(place.geometry.location);
            map.setZoom(13);
            search();
        } else {
            document.getElementById("autocomplete").placeholder = "Enter a city";
        }
    }

    // Search for hospitals in the selected city, within the viewport of the map.
    function search() {
        const search = {
            bounds: map.getBounds(),
            types: ["hospital"],
        };

        places.nearbySearch(search, (results, status, pagination) => {
            if (status === google.maps.places.PlacesServiceStatus.OK && results) {
                clearResults();
                clearMarkers();

                // Create a marker for each hospital found, and
                // assign a letter of the alphabetic to each marker icon.
                for (let i = 0; i < results.length; i++) {
                    const markerLetter = String.fromCharCode("A".charCodeAt(0) + (i % 26));
                    const markerIcon = MARKER_PATH + markerLetter + ".png";

                    // Use marker animation to drop the icons incrementally on the map.
                    markers[i] = new google.maps.Marker({
                        position: results[i].geometry.location,
                        animation: google.maps.Animation.DROP,
                        icon: markerIcon,
                    });
                    // If the user clicks a hospital marker, show the details of that hospital
                    // in an info window.
                    // ts-ignore TODO refactor to avoid storing on marker
                    markers[i].placeResult = results[i];
                    google.maps.event.addListener(markers[i], "click", showInfoWindow);
                    setTimeout(dropMarker(i), i * 100);
                    addResult(results[i], i);
                }
            }
        });
    }

    function clearMarkers() {
        for (let i = 0; i < markers.length; i++) {
            if (markers[i]) {
                markers[i].setMap(null);
            }
        }

        markers = [];
    }

    // Set the country restriction based on user input.
    // Also center and zoom the map on the given country.
    function setAutocompleteCountry() {
        const country = document.getElementById("country").value;

        if (country == "all") {
            autocomplete.setComponentRestrictions({ country: [] });
            map.setCenter({ lat: 15, lng: 0 });
            map.setZoom(2);
        } else {
            autocomplete.setComponentRestrictions({ country: country });
            map.setCenter(countries[country].center);
            map.setZoom(countries[country].zoom);
        }

        clearResults();
        clearMarkers();
    }

    function dropMarker(i) {
        return function () {
            markers[i].setMap(map);
        };
    }

    function addResult(result, i) {
        const results = document.getElementById("results");
        const markerLetter = String.fromCharCode("A".charCodeAt(0) + (i % 26));
        const markerIcon = MARKER_PATH + markerLetter + ".png";
        const tr = document.createElement("tr");

        tr.style.backgroundColor = i % 2 === 0 ? "#F0F0F0" : "#FFFFFF";
        tr.onclick = function () {
            google.maps.event.trigger(markers[i], "click");
        };

        const iconTd = document.createElement("td");
        const nameTd = document.createElement("td");
        const icon = document.createElement("img");

        icon.src = markerIcon;
        icon.setAttribute("class", "placeIcon");
        icon.setAttribute("className", "placeIcon");

        const name = document.createTextNode(result.name);

        iconTd.appendChild(icon);
        nameTd.appendChild(name);
        tr.appendChild(iconTd);
        tr.appendChild(nameTd);
        results.appendChild(tr);
    }

    function clearResults() {
        const results = document.getElementById("results");

        while (results.childNodes[0]) {
            results.removeChild(results.childNodes[0]);
        }
    }

    // Get the place details for a hospital. Show the information in an info window,
    // anchored on the marker for the hospital that the user selected.
    function showInfoWindow() {
        //
        const marker = this;

        places.getDetails(
            { placeId: marker.placeResult.place_id },
            (place, status) => {
                if (status !== google.maps.places.PlacesServiceStatus.OK) {
                    return;
                }

                infoWindow.open(map, marker);
                buildIWContent(place);
            }
        );
    }

    // Load the place information into the HTML elements used by the info window.
    function buildIWContent(place) {
        document.getElementById("iw-icon").innerHTML =
            '<img class="hospitalIcon" ' + 'src="' + place.icon + '"/>';
        //document.getElementById("iw-url").innerHTML =
        //    '<b><a href="' + place.url + '">' + place.name + "</a></b>";
        document.getElementById("iw-url").innerHTML =
            '<b><a href="https://localhost:7263/Hospital/map3">' + place.name + "</a></b>";
        document.getElementById("iw-address").textContent = place.vicinity;
        if (place.formatted_phone_number) {
            document.getElementById("iw-phone-row").style.display = "";
            document.getElementById("iw-phone").textContent =
                place.formatted_phone_number;
        } else {
            document.getElementById("iw-phone-row").style.display = "none";
        }

        // Assign a five-star rating to the hospital, using a black star ('&#10029;')
        // to indicate the rating the hospital has earned, and a white star ('&#10025;')
        // for the rating points not achieved.
        if (place.rating) {
            let ratingHtml = "";

            for (let i = 0; i < 5; i++) {
                if (place.rating < i + 0.5) {
                    ratingHtml += "&#10025;";
                } else {
                    ratingHtml += "&#10029;";
                }

                document.getElementById("iw-rating-row").style.display = "";
                document.getElementById("iw-rating").innerHTML = ratingHtml;
            }
        } else {
            document.getElementById("iw-rating-row").style.display = "none";
        }

        // The regexp isolates the first part of the URL (domain plus subdomain)
        // to give a short URL for displaying in the info window.
        if (place.website) {
            let fullUrl = place.website;
            let website = String(hostnameRegexp.exec(place.website));

            if (!website) {
                website = "http://" + place.website + "/";
                fullUrl = website;
            }

            document.getElementById("iw-website-row").style.display = "";
            document.getElementById("iw-website").textContent = website;
        } else {
            document.getElementById("iw-website-row").style.display = "none";
        }
    }

    window.initMap = initMap;
</script>
</html>