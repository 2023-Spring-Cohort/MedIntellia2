@*@model List<DataModel.GeoCode_Data>;
@{
    ViewData["Title"] = "Map";
}

<h1>@Model[0].lat</h1>
*@
<!----------------Map Container------------------------------->
<div id="map_container">
    <div id="hospital-search">
        <div id="findhospitals">Find hospitals in:</div>

        <div id="locationField">
            <input id="autocomplete" placeholder="Enter a city" type="text" value="@Context.Request.Query["search"].ToString()" />
        </div>

        <div id="controls">
            <select id="country">
                <option value="all">All</option>
                <option value="au">Australia</option>
                <option value="br">Brazil</option>
                <option value="ca">Canada</option>
                <option value="fr">France</option>
                <option value="de">Germany</option>
                <option value="mx">Mexico</option>
                <option value="nz">New Zealand</option>
                <option value="it">Italy</option>
                <option value="za">South Africa</option>
                <option value="es">Spain</option>
                <option value="pt">Portugal</option>
                <option value="us">U.S.A.</option>
                <option value="uk">United Kingdom</option>
            </select>
        </div>
    </div>

    <div id="map4"></div>

    <div id="listing">
        <table id="resultsTable">
            <tbody id="results"></tbody>
        </table>
    </div>
</div>
<!----------------END Map Container------------------------------->

<div style="display: none">
    <div id="info-content">
        <table>
            <tr id="iw-url-row" class="iw_table_row">
                <td id="iw-icon" class="iw_table_icon"></td>
                <td id="iw-url"></td>
            </tr>
            <tr id="iw-address-row" class="iw_table_row">
                <td class="iw_attribute_name">Address:</td>
                <td id="iw-address"></td>
            </tr>
            <tr id="iw-phone-row" class="iw_table_row">
                <td class="iw_attribute_name">Telephone:</td>
                <td id="iw-phone"></td>
            </tr>
            <tr id="iw-rating-row" class="iw_table_row">
                <td class="iw_attribute_name">Rating:</td>
                <td id="iw-rating"></td>
            </tr>
            <tr id="iw-website-row" class="iw_table_row">
                <td class="iw_attribute_name">Website:</td>
                <td id="iw-website"></td>
            </tr>
        </table>
    </div>
</div>

<script async
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCSEphaILLzI6VzorNDryPTm0fuW8o0shA&libraries=places&callback=initMap">
</script>
<script>
    // This example uses the autocomplete feature of the Google Places API.
    // It allows the user to find all hospitals in a given place, within a given
    // country. It then displays markers for all the hospitals returned,
    // with on-click details for each hospital.
    // This example requires the Places library. Include the libraries=places
    // parameter when you first load the API. For example:
        //<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCSEphaILLzI6VzorNDryPTm0fuW8o0shA&libraries=places" >
    let map;
    let places;
    let infoWindow;
    let markers = [];
    let autocomplete;
    const countryRestrict = { country: "us" };
    const MARKER_PATH =
        "https://developers.google.com/maps/documentation/javascript/images/marker_green";
    const hostnameRegexp = new RegExp("^https?://.+?/");
    const countries = {
        au: {
            center: { lat: -25.3, lng: 133.8 },
            zoom: 4,
        },
        br: {
            center: { lat: -14.2, lng: -51.9 },
            zoom: 3,
        },
        ca: {
            center: { lat: 62, lng: -110.0 },
            zoom: 3,
        },
        fr: {
            center: { lat: 46.2, lng: 2.2 },
            zoom: 5,
        },
        de: {
            center: { lat: 51.2, lng: 10.4 },
            zoom: 5,
        },
        mx: {
            center: { lat: 23.6, lng: -102.5 },
            zoom: 4,
        },
        nz: {
            center: { lat: -40.9, lng: 174.9 },
            zoom: 5,
        },
        it: {
            center: { lat: 41.9, lng: 12.6 },
            zoom: 5,
        },
        za: {
            center: { lat: -30.6, lng: 22.9 },
            zoom: 5,
        },
        es: {
            center: { lat: 40.5, lng: -3.7 },
            zoom: 5,
        },
        pt: {
            center: { lat: 39.4, lng: -8.2 },
            zoom: 6,
        },
        us: {
            center: { lat: 37.1, lng: -95.7 },
            zoom: 3,
        },
        uk: {
            center: { lat: 54.8, lng: -4.6 },
            zoom: 5,
        },
    };
    function selectCountry() {
        var select = document.getElementById('country');
        var option;

        for (var i = 0; i < select.options.length; i++) {
            option = select.options[i];
            if (option.value === "@Context.Request.Query["country"].ToString()"){
                option.setAttribute('selected', true);
            }
        }
    }

    //This is to make map4(temp name) execute the query. 
    function focusAndKeyPresses(){
        let element = document.getElementById("autocomplete");
        element.focus();
        //setTimeout(() => { simulateKey(view, 40, "ArrowDown"); }, 2000);
        //setTimeout(() => { simulateKey(view, 13, "Enter") }, 2000);
        //simulateKey(40, "down");
        
    }

    function simulateKey2(keyCode, type, modifiers) {
        var evtName = (typeof (type) === "string") ? "key" + type : "keydown";
        var modifier = (typeof (modifiers) === "object") ? modifier : {};

        var event = document.createEvent("HTMLEvents");
        event.initEvent(evtName, true, false);
        event.keyCode = keyCode;

        for (var i in modifiers) {
            event[i] = modifiers[i];
        }

        document.dispatchEvent(event);
    }

    function simulateKey(view, keyCode, key) {
        let event = document.createEvent("Event")
        event.initEvent("keydown", true, true)
        event.keyCode = keyCode
        event.key = event.code = key
        return view.someProp("handleKeyDown", f => f(view, event))
    }
    function initMap() {
        map = new google.maps.Map(document.getElementById("map4"), {
            zoom: countries["@Context.Request.Query["country"].ToString()"].zoom,
            //zoom: 12,
            //center: cities["@Context.Request.Query["search"].ToString()"].center,
            center: countries["@Context.Request.Query["country"].ToString()"].center,
            mapTypeControl: false,
            panControl: false,
            zoomControl: false,
            streetViewControl: false,
        });


        infoWindow = new google.maps.InfoWindow({
            content: document.getElementById("info-content"),
        });
        // Create the autocomplete object and associate it with the UI input control.
        // Restrict the search to the default country, and to place type "cities".
        autocomplete = new google.maps.places.Autocomplete(
            document.getElementById("autocomplete"),
            {
                types: ["(cities)"],
                componentRestrictions: countryRestrict,
                fields: ["geometry"],
            }
        );
        places = new google.maps.places.PlacesService(map);
        autocomplete.addListener("place_changed", onPlaceChanged);

        autocomplete.addListener("load", onPlaceChanged);
        // Add a DOM event listener to react when the user selects a country.
        document
            .getElementById("country")
            .addEventListener("change", setAutocompleteCountry);

        //map.addListener('bounds_changed', search2);



        return map;
    }

    // When the user selects a city, get the place details for the city and
    // zoom the map in on the city.
    function onPlaceChanged() {
        const place = autocomplete.getPlace();

        document.getElementById("listing").style.display="revert";
        document.getElementById("hospital-search").style.marginRight="310px";

        if (place.geometry && place.geometry.location) {
            map.panTo(place.geometry.location);
            map.setZoom(13);
            search();
        } else {
            document.getElementById("autocomplete").placeholder = "Enter a city";
        }
    }

    // Search for hospitals in the selected city, within the viewport of the map.
    function search() {
        const search = {
            bounds: map.getBounds(),
            types: ["hospital"],
        };

        places.nearbySearch(search, (results, status, pagination) => {
            if (status === google.maps.places.PlacesServiceStatus.OK && results) {
                clearResults();
                clearMarkers();

                // Create a marker for each hospital found, and
                // assign a letter of the alphabetic to each marker icon.
                for (let i = 0; i < results.length; i++) {
                    const markerLetter = String.fromCharCode("A".charCodeAt(0) + (i % 26));
                    const markerIcon = MARKER_PATH + markerLetter + ".png";

                    // Use marker animation to drop the icons incrementally on the map.
                    markers[i] = new google.maps.Marker({
                        position: results[i].geometry.location,
                        animation: google.maps.Animation.DROP,
                        icon: markerIcon,
                    });
                    // If the user clicks a hospital marker, show the details of that hospital
                    // in an info window.
                    // ts-ignore TODO refactor to avoid storing on marker
                    markers[i].placeResult = results[i];
                    google.maps.event.addListener(markers[i], "click", showInfoWindow);
                    setTimeout(dropMarker(i), i * 100);
                    addResult(results[i], i);
                }
            }
        });
    }

    function search2() {

        const search = {
            bounds: map.getBounds(),
            types: ["hospital"],
        };

        places.nearbySearch(search, (results, status, pagination) => {
            if (status === google.maps.places.PlacesServiceStatus.OK && results) {
                clearResults();
                clearMarkers();

                // Create a marker for each hospital found, and
                // assign a letter of the alphabetic to each marker icon.
                for (let i = 0; i < results.length; i++) {
                    const markerLetter = String.fromCharCode("A".charCodeAt(0) + (i % 26));
                    const markerIcon = MARKER_PATH + markerLetter + ".png";

                    // Use marker animation to drop the icons incrementally on the map.
                    markers[i] = new google.maps.Marker({
                        position: results[i].geometry.location,
                        icon: markerIcon,
                    });
                    // If the user clicks a hospital marker, show the details of that hospital
                    // in an info window.
                    // ts-ignore TODO refactor to avoid storing on marker
                    markers[i].placeResult = results[i];
                    google.maps.event.addListener(markers[i], "click", showInfoWindow);
                    setTimeout(dropMarker(i), i * 100);
                    addResult(results[i], i);
                }
            }
        });
    }

    function clearMarkers() {
        for (let i = 0; i < markers.length; i++) {
            if (markers[i]) {
                markers[i].setMap(null);
            }
        }

        markers = [];
    }

    // Set the country restriction based on user input.
    // Also center and zoom the map on the given country.
    function setAutocompleteCountry() {
        const country = document.getElementById("country").value;

        if (country == "all") {
            autocomplete.setComponentRestrictions({ country: [] });
            map.setCenter({ lat: 15, lng: 0 });
            map.setZoom(2);
        } else {
            autocomplete.setComponentRestrictions({ country: country });
            map.setCenter(countries[country].center);
            map.setZoom(countries[country].zoom);
        }

        clearResults();
        clearMarkers();
    }

    function dropMarker(i) {
        return function () {
            markers[i].setMap(map);
        };
    }

    function addResult(result, i) {
        const results = document.getElementById("results");
        const markerLetter = String.fromCharCode("A".charCodeAt(0) + (i % 26));
        const markerIcon = MARKER_PATH + markerLetter + ".png";
        const tr = document.createElement("tr");

        tr.style.backgroundColor = i % 2 === 0 ? "#F0F0F0" : "#FFFFFF";
        tr.onclick = function () {
            google.maps.event.trigger(markers[i], "click");
        };

        const iconTd = document.createElement("td");
        const nameTd = document.createElement("td");
        const icon = document.createElement("img");

        icon.src = markerIcon;
        icon.setAttribute("class", "placeIcon");
        icon.setAttribute("className", "placeIcon");

        const name = document.createTextNode(result.name);

        iconTd.appendChild(icon);
        nameTd.appendChild(name);
        tr.appendChild(iconTd);
        tr.appendChild(nameTd);
        results.appendChild(tr);
    }

    function clearResults() {
        const results = document.getElementById("results");

        while (results.childNodes[0]) {
            results.removeChild(results.childNodes[0]);
        }
    }

    // Get the place details for a hospital. Show the information in an info window,
    // anchored on the marker for the hospital that the user selected.
    function showInfoWindow() {
        // 
        const marker = this;

        places.getDetails(
            { placeId: marker.placeResult.place_id },
            (place, status) => {
                if (status !== google.maps.places.PlacesServiceStatus.OK) {
                    return;
                }

                infoWindow.open(map, marker);
                buildIWContent(place);
            }
        );
    }

    // Load the place information into the HTML elements used by the info window.
    function buildIWContent(place) {
        var url = "https://localhost:7263/Hospital/map3?" + place.name + "&" + place.city + "&" + place.state + "&" + place.country;
        document.getElementById("iw-icon").innerHTML =
            '<img class="hospitalIcon" ' + 'src="' + place.icon + '"/>';
        //document.getElementById("iw-url").innerHTML =
        //    '<b><a href="' + place.url + '">' + place.name + "</a></b>";
        document.getElementById("iw-url").innerHTML =
            '<b><a href="'+ url +'">' + place.name + "</a></b>";
        document.getElementById("iw-address").textContent = place.vicinity;
        if (place.formatted_phone_number) {
            document.getElementById("iw-phone-row").style.display = "";
            document.getElementById("iw-phone").textContent =
                place.formatted_phone_number;
        } else {
            document.getElementById("iw-phone-row").style.display = "none";
        }

        // Assign a five-star rating to the hospital, using a black star ('&#10029;')
        // to indicate the rating the hospital has earned, and a white star ('&#10025;')
        // for the rating points not achieved.
        if (place.rating) {
            let ratingHtml = "";

            for (let i = 0; i < 5; i++) {
                if (place.rating < i + 0.5) {
                    ratingHtml += "&#10025;";
                } else {
                    ratingHtml += "&#10029;";
                }

                document.getElementById("iw-rating-row").style.display = "";
                document.getElementById("iw-rating").innerHTML = ratingHtml;
            }
        } else {
            document.getElementById("iw-rating-row").style.display = "none";
        }

        // The regexp isolates the first part of the URL (domain plus subdomain)
        // to give a short URL for displaying in the info window.
        if (place.website) {
            let fullUrl = place.website;
            let website = String(hostnameRegexp.exec(place.website));

            if (!website) {
                website = "http://" + place.website + "/";
                fullUrl = website;
            }

            document.getElementById("iw-website-row").style.display = "";
            document.getElementById("iw-website").textContent = website;
        } else {
            document.getElementById("iw-website-row").style.display = "none";
        }
    }

    selectCountry();
    focusAndKeyPresses();
    setTimeout(() => { simulateKey2(40, "ArrowDown"); }, 2000);
    setTimeout(() => { simulateKey2(13, "Enter") }, 2000);

    window.initMap = initMap;




</script>